repeat
	task.wait()
until game:IsLoaded()

local library = {}
local ToggleUI = false
library.currentTab = nil
library.flags = {}

-- ========== 全局配置（统一控制样式/动画） ==========
local Config = {
    MainColor = Color3.fromRGB(15,23,42),       -- 主色调（深太空蓝）
    ZyColor = Color3.fromRGB(30,41,59),        -- 控件背景色（深蓝灰）
    HighlightColor = Color3.fromRGB(96,165,250),-- 高亮色（亮天蓝）
    TextColor = Color3.fromRGB(255,255,255),   -- 文本色（亮白）
    DisabledTextColor = Color3.fromRGB(150,150,150),-- 禁用文本色
    PlaceholderColor = Color3.fromRGB(180,180,180),-- 占位符色
    MainTransparency = 0.3,                    -- 主容器透明度
    ZyTransparency = 0.3,                      -- 控件透明度
    Font = Enum.Font.Code,                     -- 全局字体（等宽代码体）
    TweenTime = 0.2,                           -- 默认动画时长
    RippleColor = Color3.fromRGB(96,165,250)   -- 点击波纹色
}

-- ========== 服务快捷获取 ==========
local services = setmetatable({}, {
	__index = function(t, k)
		return game.GetService(game, k)
	end,
})
local mouse = services.Players.LocalPlayer:GetMouse()

-- ========== 工具函数 ==========
-- 动画工具
function Tween(obj, t, data)
	services.TweenService
		:Create(obj, TweenInfo.new(t[1] or Config.TweenTime, Enum.EasingStyle[t[2] or "Sine"], Enum.EasingDirection[t[3] or "Out"]), data)
		:Play()
	return true
end

-- 点击波纹效果
function Ripple(obj)
	spawn(function()
		if obj.ClipsDescendants ~= true then
			obj.ClipsDescendants = true
		end
		local Ripple = Instance.new("ImageLabel")
		Ripple.Name = "Ripple"
		Ripple.Parent = obj
		Ripple.BackgroundTransparency = 1.000
		Ripple.ZIndex = 8
		Ripple.Image = "rbxassetid://2708891598"
		Ripple.ImageTransparency = 0.800
		Ripple.ScaleType = Enum.ScaleType.Fit
		Ripple.ImageColor3 = Config.RippleColor
		Ripple.Position = UDim2.new(
			(mouse.X - Ripple.AbsolutePosition.X) / obj.AbsoluteSize.X,
			0,
			(mouse.Y - Ripple.AbsolutePosition.Y) / obj.AbsoluteSize.Y,
			0
		)
		Tween(
			Ripple,
			{ 0.3, "Linear", "InOut" },
			{ Position = UDim2.new(-5.5, 0, -5.5, 0), Size = UDim2.new(12, 0, 12, 0) }
		)
		wait(0.15)
		Tween(Ripple, { 0.3, "Linear", "InOut" }, { ImageTransparency = 1 })
		wait(0.3)
		Ripple:Destroy()
	end)
end

-- 创建圆角（复用）
function createCorner(parent, radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius or 6)
    corner.Parent = parent
    return corner
end

-- 创建渐变（复用）
function createGradient(parent, colorSeq, rotation)
    local gradient = Instance.new("UIGradient")
    gradient.Color = colorSeq or ColorSequence.new({
        ColorSequenceKeypoint.new(0, Config.ZyColor:lerp(Color3.White, 0.2)),
        ColorSequenceKeypoint.new(1, Config.ZyColor:lerp(Color3.Black, 0.2))
    })
    gradient.Rotation = rotation or 0
    gradient.Parent = parent
    return gradient
end

-- 时间格式化（倒计时用）
function formatTime(sec, fmt)
    local h = math.floor(sec / 3600)
    local m = math.floor((sec % 3600) / 60)
    local s = sec % 60
    if fmt == "HH:MM:SS" then
        return string.format("%02d:%02d:%02d", h, m, s)
    else
        return string.format("%02d:%02d", m, s)
    end
end

-- ========== 标签切换逻辑 ==========
local toggled = false
local switchingTabs = false
function switchTab(new)
	if switchingTabs then
		return
	end
	local old = library.currentTab
	if old == nil then
		new[2].Visible = true
		library.currentTab = new
		Tween(new[1], {0.1}, { ImageTransparency = 0 })
		Tween(new[1].TabText, {0.1}, { TextTransparency = 0 })
		return
	end
	if old[1] == new[1] then
		return
	end
	switchingTabs = true
	library.currentTab = new
	Tween(old[1], {0.1}, { ImageTransparency = 0.2 })
	Tween(new[1], {0.1}, { ImageTransparency = 0 })
	Tween(old[1].TabText, {0.1}, { TextTransparency = 0.2 })
	Tween(new[1].TabText, {0.1}, { TextTransparency = 0 })
	-- 标签切换动画（新增）
	Tween(old[2], {0.2, "Quad", "In"}, { Position = UDim2.new(-0.1,0,0,3), Transparency = 1 })
	task.wait(0.1)
	old[2].Visible = false
	new[2].Visible = true
	Tween(new[2], {0.2, "Quad", "Out"}, { Position = UDim2.new(0.217000037,0,0,3), Transparency = 0 })
	task.wait(0.1)
	switchingTabs = false
end

-- ========== 窗口拖拽逻辑 ==========
function drag(frame, hold)
	if not hold then
		hold = frame
	end
	local dragging
	local dragInput
	local dragStart
	local startPos
	local function update(input)
		local delta = input.Position - dragStart
		frame.Position =
			UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end
	hold.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			startPos = frame.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)
	frame.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			dragInput = input
		end
	end)
	services.UserInputService.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			update(input)
		end
	end)
end

-- ========== 主UI创建 ==========
function library.new(library, name, theme)
	-- 清除旧UI
	for _, v in next, services.CoreGui:GetChildren() do
		if v.Name == "REN" then
			v:Destroy()
		end
	end

	-- ========== UI元素创建 ==========
	local dogent = Instance.new("ScreenGui")
	local Main = Instance.new("Frame")
	local TabMain = Instance.new("Frame")
	local MainC = createCorner(Main, 3)
	local SB = Instance.new("Frame")
	local SBC = createCorner(SB, 6)
	local Side = Instance.new("Frame")
	local SideG = createGradient(Side, ColorSequence.new({ColorSequenceKeypoint.new(0, Config.ZyColor), ColorSequenceKeypoint.new(1, Config.ZyColor)}), 90)
	local TabBtns = Instance.new("ScrollingFrame")
	local TabBtnsL = Instance.new("UIListLayout")
	local ScriptTitle = Instance.new("TextLabel")
	local SBG = createGradient(SB, ColorSequence.new({ColorSequenceKeypoint.new(0, Config.ZyColor), ColorSequenceKeypoint.new(1, Config.ZyColor)}), 90)
	local Open = Instance.new("TextButton")
	local UIG = createGradient(Open)
	local DropShadowHolder = Instance.new("Frame")
	local DropShadow = Instance.new("ImageLabel")
	local UICornerMain = createCorner(Main, 3)
	local UIGradient = Instance.new("UIGradient")
	local UIGradientTitle = Instance.new("UIGradient")
	local MinBtn = Instance.new("TextButton") -- 新增：最小化按钮

	-- 保护UI（防Roblox屏蔽）
	if syn and syn.protect_gui then
		syn.protect_gui(dogent)
	end
	dogent.Name = "REN"
	dogent.Parent = services.CoreGui

	-- 销毁UI函数
	function UiDestroy()
		dogent:Destroy()
	end

	-- 显示/隐藏切换
	function ToggleUILib()
		Main.Visible = not Main.Visible
	end

	-- ========== 主窗口样式 ==========
	Main.Name = "Main"
	Main.Parent = dogent
	Main.AnchorPoint = Vector2.new(0.5, 0.5)
	Main.BackgroundColor3 = Config.MainColor
	Main.BackgroundTransparency = Config.MainTransparency
	Main.BorderColor3 = Config.HighlightColor
	Main.Position = UDim2.new(0.5, 0, 0.5, 0)
	Main.Size = UDim2.new(0, 572, 0, 353)
	Main.ZIndex = 1
	Main.Active = true
	Main.Draggable = false -- 禁用自带拖拽，用自定义drag函数
	-- 窗口显示动画（新增）
	Main.Visible = false
	Main.Transparency = 1
	Tween(Main, {0.4, "Quad", "Out"}, { Transparency = 0 })

	-- 快捷键控制（LeftControl）
	services.UserInputService.InputEnded:Connect(function(input)
		if input.KeyCode == Enum.KeyCode.LeftControl then
			Main.Visible = not Main.Visible
			if Main.Visible then
				Tween(Main, {0.4, "Quad", "Out"}, { Transparency = 0, Size = UDim2.new(0,572,0,353) })
			else
				Tween(Main, {0.3, "Quad", "In"}, { Transparency = 1, Size = UDim2.new(0,500,0,300) })
			end
		end
	end)

	-- 窗口拖拽
	drag(Main)

	-- ========== 阴影效果（动态呼吸） ==========
	DropShadowHolder.Name = "DropShadowHolder"
	DropShadowHolder.Parent = Main
	DropShadowHolder.BackgroundTransparency = 1.000
	DropShadowHolder.BorderSizePixel = 0
	DropShadowHolder.Size = UDim2.new(1, 0, 1, 0)
	DropShadowHolder.ZIndex = 0

	DropShadow.Name = "DropShadow"
	DropShadow.Parent = DropShadowHolder
	DropShadow.AnchorPoint = Vector2.new(0.5, 0.5)
	DropShadow.BackgroundTransparency = 1.000
	DropShadow.BorderSizePixel = 0
	DropShadow.Position = UDim2.new(0.5, 0, 0.5, 0)
	DropShadow.Size = UDim2.new(1, 43, 1, 43)
	DropShadow.ZIndex = 0
	DropShadow.Image = "rbxassetid://6015897843"
	DropShadow.ImageColor3 = Config.HighlightColor
	DropShadow.ImageTransparency = 0.500
	DropShadow.ScaleType = Enum.ScaleType.Slice
	DropShadow.SliceCenter = Rect.new(49, 49, 450, 450)

	-- 阴影动态呼吸（新增）
	UIGradient.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0.00, Config.HighlightColor),
		ColorSequenceKeypoint.new(1.00, Config.HighlightColor:lerp(Color3.Black, 0.5))
	})
	UIGradient.Parent = DropShadow
	local tweeninfo = TweenInfo.new(3, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true)
	local tween = services.TweenService:Create(DropShadow, tweeninfo, { ImageTransparency = 0.7 })
	tween:Play()

	-- ========== 窗口缩放动画 ==========
	function toggleui()
		toggled = not toggled
		spawn(function()
			if toggled then
				wait(0.3)
			end
		end)
		Tween(Main, { 0.3, "Sine", "InOut" }, { Size = UDim2.new(0, 609, 0, (toggled and 505 or 353)) })
	end

	-- ========== 标签内容区 ==========
	TabMain.Name = "TabMain"
	TabMain.Parent = Main
	TabMain.BackgroundTransparency = 1.000
	TabMain.Position = UDim2.new(0.217000037, 0, 0, 3)
	TabMain.Size = UDim2.new(0, 448, 0, 353)
	TabMain.Transparency = 0

	-- ========== 侧边栏 ==========
	SB.Name = "SB"
	SB.Parent = Main
	SB.BackgroundColor3 = Config.MainColor
	SB.BackgroundTransparency = Config.MainTransparency
	SB.BorderColor3 = Config.MainColor
	SB.Size = UDim2.new(0, 8, 0, 353)

	Side.Name = "Side"
	Side.Parent = SB
	Side.BackgroundColor3 = Config.MainColor
	Side.BackgroundTransparency = Config.MainTransparency
	Side.BorderSizePixel = 0
	Side.ClipsDescendants = true
	Side.Position = UDim2.new(1, 0, 0, 0)
	Side.Size = UDim2.new(0, 110, 0, 353)

	-- ========== 标签按钮容器 ==========
	TabBtns.Name = "TabBtns"
	TabBtns.Parent = Side
	TabBtns.Active = true
	TabBtns.BackgroundTransparency = 1.000
	TabBtns.BorderSizePixel = 0
	TabBtns.Position = UDim2.new(0, 0, 0.0973535776, 0)
	TabBtns.Size = UDim2.new(0, 110, 0, 318)
	TabBtns.CanvasSize = UDim2.new(0, 0, 1, 0)
	TabBtns.ScrollBarThickness = 0

	TabBtnsL.Name = "TabBtnsL"
	TabBtnsL.Parent = TabBtns
	TabBtnsL.SortOrder = Enum.SortOrder.LayoutOrder
	TabBtnsL.Padding = UDim.new(0, 12)

	-- ========== 标题样式（彩虹动画） ==========
	ScriptTitle.Name = "ScriptTitle"
	ScriptTitle.Parent = Side
	ScriptTitle.BackgroundTransparency = 1.000
	ScriptTitle.Position = UDim2.new(0, 0, 0.00953488424, 0)
	ScriptTitle.Size = UDim2.new(0, 102, 0, 20)
	ScriptTitle.Font = Config.Font
	ScriptTitle.Text = name
	ScriptTitle.TextColor3 = Config.TextColor
	ScriptTitle.TextSize = 16.000
	ScriptTitle.TextTransparency = 0
	ScriptTitle.TextScaled = true
	ScriptTitle.TextXAlignment = Enum.TextXAlignment.Left
	ScriptTitle.TextStrokeTransparency = 0.7 -- 新增：文本发光边框
	ScriptTitle.TextStrokeColor3 = Config.HighlightColor

	UIGradientTitle.Parent = ScriptTitle

	-- 标题彩虹动画
	local function NPLHKB_fake_script()
		local script = Instance.new("LocalScript", ScriptTitle)
		local button = script.Parent
		local gradient = button.UIGradient
		local ts = services.TweenService
		local ti = TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
		local offset = { Offset = Vector2.new(1, 0) }
		local create = ts:Create(gradient, ti, offset)
		local startingPos = Vector2.new(-1, 0)
		local list = {}
		local s, kpt = ColorSequence.new, ColorSequenceKeypoint.new
		local counter = 0
		local status = "down"
		gradient.Offset = startingPos

		local function rainbowColors()
			local sat, val = 255, 255
			for i = 1, 10 do
				local hue = i * 17
				table.insert(list, Color3.fromHSV(hue / 255, sat / 255, val / 255))
			end
		end
		rainbowColors()
		gradient.Color = s({ kpt(0, list[#list]), kpt(0.5, list[#list - 1]), kpt(1, list[#list - 2]) })
		counter = #list

		local function animate()
			create:Play()
			create.Completed:Wait()
			gradient.Offset = startingPos
			gradient.Rotation = 180

			if counter == #list - 1 and status == "down" then
				gradient.Color = s({ kpt(0, gradient.Color.Keypoints[1].Value), kpt(0.5, list[#list]), kpt(1, list[1]) })
				counter = 1
				status = "up"
			elseif counter == #list and status == "down" then
				gradient.Color = s({ kpt(0, gradient.Color.Keypoints[1].Value), kpt(0.5, list[1]), kpt(1, list[2]) })
				counter = 2
				status = "up"
			elseif counter <= #list - 2 and status == "down" then
				gradient.Color = s({
					kpt(0, gradient.Color.Keypoints[1].Value),
					kpt(0.5, list[counter + 1]),
					kpt(1, list[counter + 2]),
				})
				counter = counter + 2
				status = "up"
			end

			create:Play()
			create.Completed:Wait()
			gradient.Offset = startingPos
			gradient.Rotation = 0

			if counter == #list - 1 and status == "up" then
				gradient.Color = s({ kpt(0, list[1]), kpt(0.5, list[#list]), kpt(1, gradient.Color.Keypoints[3].Value) })
				counter = 1
				status = "down"
			elseif counter == #list and status == "up" then
				gradient.Color = s({ kpt(0, list[2]), kpt(0.5, list[1]), kpt(1, gradient.Color.Keypoints[3].Value) })
				counter = 2
				status = "down"
			elseif counter <= #list - 2 and status == "up" then
				gradient.Color = s({
					kpt(0, list[counter + 2]),
					kpt(0.5, list[counter + 1]),
					kpt(1, gradient.Color.Keypoints[3].Value),
				})
				counter = counter + 2
				status = "down"
			end
			animate()
		end
		animate()
	end
	coroutine.wrap(NPLHKB_fake_script)()

	-- 标签按钮列表自动调整
	TabBtnsL:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
		TabBtns.CanvasSize = UDim2.new(0, 0, 0, TabBtnsL.AbsoluteContentSize.Y + 18)
	end)

	-- ========== 打开按钮（侧边快捷） ==========
	Open.Name = "Open"
	Open.Parent = dogent
	Open.BackgroundColor3 = Config.MainColor
	Open.BackgroundTransparency = Config.MainTransparency
	Open.Position = UDim2.new(0.00829315186, 0, 0.31107837, 0)
	Open.Size = UDim2.new(0, 61, 0, 32)
	Open.Font = Config.Font
	Open.Text = "黑洞中心"
	Open.TextColor3 = Config.TextColor
	Open.TextTransparency = 0
	Open.TextSize = 14.000
	Open.Active = true
	Open.Draggable = true
	Open.ZIndex = 100
	createCorner(Open, 6)

	-- 打开按钮点击逻辑
	Open.MouseButton1Click:Connect(function()
		Ripple(Open)
		Main.Visible = not Main.Visible
		if Main.Visible then
			Tween(Main, {0.4, "Quad", "Out"}, { Transparency = 0, Size = UDim2.new(0,572,0,353) })
		else
			Tween(Main, {0.3, "Quad", "In"}, { Transparency = 1, Size = UDim2.new(0,500,0,300) })
		end
	end)

	-- 打开按钮悬停效果（新增）
	Open.MouseEnter:Connect(function()
		Tween(Open, {}, { BackgroundTransparency = 0, Size = UDim2.new(0,65,0,34) })
	end)
	Open.MouseLeave:Connect(function()
		Tween(Open, {}, { BackgroundTransparency = Config.MainTransparency, Size = UDim2.new(0,61,0,32) })
	end)

	-- ========== 新增：最小化按钮 ==========
	MinBtn.Name = "MinBtn"
	MinBtn.Parent = Main
	MinBtn.BackgroundColor3 = Config.HighlightColor
	MinBtn.BackgroundTransparency = 0.3
	MinBtn.Position = UDim2.new(0.92, -24, 0, 4)
	MinBtn.Size = UDim2.new(0, 20, 0, 20)
	MinBtn.Font = Config.Font
	MinBtn.Text = "_"
	MinBtn.TextColor3 = Config.TextColor
	MinBtn.TextSize = 16
	MinBtn.ZIndex = 2
	createCorner(MinBtn, 4)

	-- 最小化逻辑
	local isMinimized = false
	MinBtn.MouseButton1Click:Connect(function()
		Ripple(MinBtn)
		isMinimized = not isMinimized
		if isMinimized then
			-- 最小化：缩为标题栏
			Tween(Main, {0.3, "Quad", "InOut"}, { Size = UDim2.new(0, 200, 0, 30) })
			TabMain.Visible = false
			Side.Visible = false
			SB.Visible = false
			MinBtn.Text = "□"
		else
			-- 恢复：展开完整窗口
			Tween(Main, {0.3, "Quad", "InOut"}, { Size = UDim2.new(0, 572, 0, 353) })
			task.wait(0.1)
			TabMain.Visible = true
			Side.Visible = true
			SB.Visible = true
			MinBtn.Text = "_"
		end
	end)

	-- ========== UI核心API ==========
	local window = {}

	-- 创建标签页
	function window.Tab(window, name, icon)
		local Tab = Instance.new("ScrollingFrame")
		local TabIco = Instance.new("ImageLabel")
		local TabText = Instance.new("TextLabel")
		local TabBtn = Instance.new("TextButton")
		local TabL = Instance.new("UIListLayout")

		-- 标签内容区
		Tab.Name = "Tab"
		Tab.Parent = TabMain
		Tab.Active = true
		Tab.BackgroundTransparency = 1.000
		Tab.Size = UDim2.new(1, 0, 1, 0)
		Tab.ScrollBarThickness = 2
		Tab.ScrollBarImageColor3 = Config.HighlightColor
		Tab.ScrollBarImageTransparency = 0.5
		Tab.Visible = false

		-- 标签图标
		TabIco.Name = "TabIco"
		TabIco.Parent = TabBtns
		TabIco.BackgroundTransparency = 1.000
		TabIco.BorderSizePixel = 0
		TabIco.Size = UDim2.new(0, 24, 0, 24)
		TabIco.Image = ("rbxassetid://%s"):format((icon or 4370341699))
		TabIco.ImageTransparency = 0.2

		-- 标签文本
		TabText.Name = "TabText"
		TabText.Parent = TabIco
		TabText.BackgroundTransparency = 1.000
		TabText.Position = UDim2.new(1.41666663, 0, 0, 0)
		TabText.Size = UDim2.new(0, 76, 0, 24)
		TabText.Font = Config.Font
		TabText.Text = name
		TabText.TextColor3 = Config.TextColor
		TabText.TextSize = 14.000
		TabText.TextTransparency = 0.2
		TabText.TextXAlignment = Enum.TextXAlignment.Left

		-- 标签按钮
		TabBtn.Name = "TabBtn"
		TabBtn.Parent = TabIco
		TabBtn.BackgroundTransparency = 1.000
		TabBtn.BorderSizePixel = 0
		TabBtn.Size = UDim2.new(0, 110, 0, 24)
		TabBtn.AutoButtonColor = false
		TabBtn.Text = ""

		-- 标签内容布局
		TabL.Name = "TabL"
		TabL.Parent = Tab
		TabL.SortOrder = Enum.SortOrder.LayoutOrder
		TabL.Padding = UDim.new(0, 4)

		-- 标签点击逻辑
		TabBtn.MouseButton1Click:Connect(function()
			spawn(function() Ripple(TabBtn) end)
			switchTab({ TabIco, Tab })
		end)

		-- 标签悬停效果（新增）
		TabBtn.MouseEnter:Connect(function()
			Tween(TabIco, {}, { ImageTransparency = 0 })
			Tween(TabText, {}, { TextTransparency = 0 })
		end)
		TabBtn.MouseLeave:Connect(function()
			if library.currentTab and library.currentTab[1] ~= TabIco then
				Tween(TabIco, {}, { ImageTransparency = 0.2 })
				Tween(TabText, {}, { TextTransparency = 0.2 })
			end
		end)

		-- 默认选中第一个标签
		if library.currentTab == nil then
			switchTab({ TabIco, Tab })
		end

		-- 内容区自动调整高度
		TabL:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
			Tab.CanvasSize = UDim2.new(0, 0, 0, TabL.AbsoluteContentSize.Y + 8)
		end)

		-- 区域（Section）API
		local tab = {}
		function tab.section(tab, name, TabVal)
			local Section = Instance.new("Frame")
			local SectionC = createCorner(Section, 6)
			local SectionText = Instance.new("TextLabel")
			local SectionOpen = Instance.new("ImageLabel")
			local SectionOpened = Instance.new("ImageLabel")
			local SectionToggle = Instance.new("ImageButton")
			local Objs = Instance.new("Frame")
			local ObjsL = Instance.new("UIListLayout")

			-- 区域容器
			Section.Name = "Section"
			Section.Parent = Tab
			Section.BackgroundColor3 = Config.ZyColor
			Section.BackgroundTransparency = Config.ZyTransparency
			Section.BorderSizePixel = 0
			Section.ClipsDescendants = true
			Section.Size = UDim2.new(0.981000006, 0, 0, 36)
			createGradient(Section)

			-- 区域标题
			SectionText.Name = "SectionText"
			SectionText.Parent = Section
			SectionText.BackgroundTransparency = 1.000
			SectionText.Position = UDim2.new(0.0887396261, 0, 0, 0)
			SectionText.Size = UDim2.new(0, 401, 0, 36)
			SectionText.Font = Config.Font
			SectionText.Text = name
			SectionText.TextColor3 = Config.TextColor
			SectionText.TextSize = 16.000
			SectionText.TextTransparency = 0
			SectionText.TextXAlignment = Enum.TextXAlignment.Left

			-- 展开/收起图标
			SectionOpen.Name = "SectionOpen"
			SectionOpen.Parent = SectionText
			SectionOpen.BackgroundTransparency = 1
			SectionOpen.BorderSizePixel = 0
			SectionOpen.Position = UDim2.new(0, -33, 0, 5)
			SectionOpen.Size = UDim2.new(0, 26, 0, 26)
			SectionOpen.Image = "http://www.roblox.com/asset/?id=6031302934"
			SectionOpen.ImageColor3 = Config.HighlightColor

			SectionOpened.Name = "SectionOpened"
			SectionOpened.Parent = SectionOpen
			SectionOpened.BackgroundTransparency = 1.000
			SectionOpened.BorderSizePixel = 0
			SectionOpened.Size = UDim2.new(0, 26, 0, 26)
			SectionOpened.Image = "http://www.roblox.com/asset/?id=6031302932"
			SectionOpened.ImageColor3 = Config.HighlightColor
			SectionOpened.ImageTransparency = 1.000

			-- 展开/收起按钮
			SectionToggle.Name = "SectionToggle"
			SectionToggle.Parent = SectionOpen
			SectionToggle.BackgroundTransparency = 1
			SectionToggle.BorderSizePixel = 0
			SectionToggle.Size = UDim2.new(0, 26, 0, 26)

			-- 组件容器
			Objs.Name = "Objs"
			Objs.Parent = Section
			Objs.BackgroundTransparency = 1
			Objs.BorderSizePixel = 0
			Objs.Position = UDim2.new(0, 6, 0, 36)
			Objs.Size = UDim2.new(0.986347735, 0, 0, 0)

			-- 组件布局
			ObjsL.Name = "ObjsL"
			ObjsL.Parent = Objs
			ObjsL.SortOrder = Enum.SortOrder.LayoutOrder
			ObjsL.Padding = UDim.new(0, 8)

			-- 初始展开状态
			local open = TabVal ~= false
			if TabVal ~= false then
				Section.Size = UDim2.new(0.981000006, 0, 0, open and 36 + ObjsL.AbsoluteContentSize.Y + 8 or 36)
				SectionOpened.ImageTransparency = (open and 0 or 1)
				SectionOpen.ImageTransparency = (open and 1 or 0)
			end

			-- 展开/收起逻辑
			SectionToggle.MouseButton1Click:Connect(function()
				Ripple(SectionToggle)
				open = not open
				Section.Size = UDim2.new(0.981000006, 0, 0, open and 36 + ObjsL.AbsoluteContentSize.Y + 8 or 36)
				SectionOpened.ImageTransparency = (open and 0 or 1)
				SectionOpen.ImageTransparency = (open and 1 or 0)
			end)

			-- 自动调整区域高度
			ObjsL:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
				if not open then return end
				Section.Size = UDim2.new(0.981000006, 0, 0, 36 + ObjsL.AbsoluteContentSize.Y + 8)
			end)

			-- 组件API（原有核心组件）
			local section = {}

			-- 1. 按钮（原有）
			function section.Button(section, text, callback)
				local callback = callback or function() end
				local BtnModule = Instance.new("Frame")
				local Btn = Instance.new("TextButton")
				local BtnC = createCorner(Btn, 6)

				BtnModule.Name = "BtnModule"
				BtnModule.Parent = Objs
				BtnModule.BackgroundTransparency = 1.000
				BtnModule.Size = UDim2.new(0, 428, 0, 38)

				Btn.Name = "Btn"
				Btn.Parent = BtnModule
				Btn.BackgroundColor3 = Config.ZyColor
				Btn.BackgroundTransparency = Config.ZyTransparency
				Btn.BorderSizePixel = 0
				Btn.Size = UDim2.new(0, 428, 0, 38)
				Btn.AutoButtonColor = false
				Btn.Font = Config.Font
				Btn.Text = "   " .. text
				Btn.TextColor3 = Config.TextColor
				Btn.TextSize = 16.000
				Btn.TextXAlignment = Enum.TextXAlignment.Left
				createGradient(Btn)

				-- 点击逻辑
				Btn.MouseButton1Click:Connect(function()
					spawn(function() Ripple(Btn) end)
					spawn(callback)
				end)

				-- 悬停效果
				Btn.MouseEnter:Connect(function()
					Tween(Btn, {}, { BackgroundTransparency = 0, Size = UDim2.new(0,432,0,40) })
				end)
				Btn.MouseLeave:Connect(function()
					Tween(Btn, {}, { BackgroundTransparency = Config.ZyTransparency, Size = UDim2.new(0,428,0,38) })
				end)

				return Btn
			end

			-- 2. 标签（原有）
			function section:Label(text)
				local LabelModule = Instance.new("Frame")
				local TextLabel = Instance.new("TextLabel")
				local LabelC = createCorner(TextLabel, 6)

				LabelModule.Name = "LabelModule"
				LabelModule.Parent = Objs
				LabelModule.BackgroundTransparency = 1.000
				LabelModule.Size = UDim2.new(0, 428, 0, 19)

				TextLabel.Parent = LabelModule
				TextLabel.BackgroundColor3 = Config.ZyColor
				TextLabel.BackgroundTransparency = Config.ZyTransparency
				TextLabel.Size = UDim2.new(0, 428, 0, 22)
				TextLabel.Font = Config.Font
				TextLabel.Text = text
				TextLabel.TextColor3 = Config.TextColor
				TextLabel.TextSize = 14.000
				TextLabel.TextTransparency = 0
				createGradient(TextLabel)

				return TextLabel
			end

			-- 3. 开关（原有）
			function section.Toggle(section, text, flag, enabled, callback)
				local callback = callback or function() end
				local enabled = enabled or false
				assert(text, "No text provided")
				assert(flag, "No flag provided")
				library.flags[flag] = enabled

				local ToggleModule = Instance.new("Frame")
				local ToggleBtn = Instance.new("TextButton")
				local ToggleBtnC = createCorner(ToggleBtn, 6)
				local ToggleDisable = Instance.new("Frame")
				local ToggleSwitch = Instance.new("Frame")
				local ToggleSwitchC = createCorner(ToggleSwitch, 6)
				local ToggleDisableC = createCorner(ToggleDisable, 6)

				ToggleModule.Name = "ToggleModule"
				ToggleModule.Parent = Objs
				ToggleModule.BackgroundTransparency = 1.000
				ToggleModule.Size = UDim2.new(0, 428, 0, 38)

				ToggleBtn.Name = "ToggleBtn"
				ToggleBtn.Parent = ToggleModule
				ToggleBtn.BackgroundColor3 = Config.ZyColor
				ToggleBtn.BackgroundTransparency = Config.ZyTransparency
				ToggleBtn.BorderSizePixel = 0
				ToggleBtn.Size = UDim2.new(0, 428, 0, 38)
				ToggleBtn.AutoButtonColor = false
				ToggleBtn.Font = Config.Font
				ToggleBtn.Text = "   " .. text
				ToggleBtn.TextColor3 = Config.TextColor
				ToggleBtn.TextSize = 16.000
				ToggleBtn.TextXAlignment = Enum.TextXAlignment.Left
				createGradient(ToggleBtn)

				ToggleDisable.Name = "ToggleDisable"
				ToggleDisable.Parent = ToggleBtn
				ToggleDisable.BackgroundColor3 = Config.MainColor
				ToggleDisable.BackgroundTransparency = Config.MainTransparency
				ToggleDisable.BorderSizePixel = 0
				ToggleDisable.Position = UDim2.new(0.901869178, 0, 0.208881587, 0)
				ToggleDisable.Size = UDim2.new(0, 36, 0, 22)

				ToggleSwitch.Name = "ToggleSwitch"
				ToggleSwitch.Parent = ToggleDisable
				ToggleSwitch.BackgroundColor3 = enabled and Config.HighlightColor or Config.TextColor
				ToggleSwitch.Size = UDim2.new(0, 24, 0, 22)
				ToggleSwitch.Position = UDim2.new(enabled and 0.33, 0, 0, 0)

				-- 开关控制函数
				local funcs = {
					SetState = function(self, state)
						if state == nil then state = not library.flags[flag] end
						if library.flags[flag] == state then return end
						Tween(ToggleSwitch, {}, {
							Position = UDim2.new(state and 0.33, 0, 0, 0),
							BackgroundColor3 = state and Config.HighlightColor or Config.TextColor
						})
						library.flags[flag] = state
						callback(state)
					end,
					Module = ToggleModule,
				}

				if enabled then funcs:SetState(true) end

				-- 点击逻辑
				ToggleBtn.MouseButton1Click:Connect(function()
					Ripple(ToggleBtn)
					funcs:SetState()
				end)

				-- 悬停效果
				ToggleBtn.MouseEnter:Connect(function()
					Tween(ToggleBtn, {}, { BackgroundTransparency = 0 })
				end)
				ToggleBtn.MouseLeave:Connect(function()
					Tween(ToggleBtn, {}, { BackgroundTransparency = Config.ZyTransparency })
				end)

				return funcs
			end

			-- 4. 按键绑定（原有）
			function section.Keybind(section, text, default, callback)
				local callback = callback or function() end
				assert(text, "No text provided")
				assert(default, "No default key provided")
				local default = (typeof(default) == "string" and Enum.KeyCode[default] or default)
				local banned = { Return = true, Space = true, Tab = true, Backquote = true, CapsLock = true, Escape = true, Unknown = true }
				local shortNames = {
					RightControl = "Right Ctrl", LeftControl = "Left Ctrl", LeftShift = "Left Shift", RightShift = "Right Shift",
					Semicolon = ";", Quote = '"', LeftBracket = "[", RightBracket = "]", Equals = "=", Minus = "-",
					RightAlt = "Right Alt", LeftAlt = "Left Alt"
				}
				local bindKey = default
				local keyTxt = (default and (shortNames[default.Name] or default.Name) or "None")

				local KeybindModule = Instance.new("Frame")
				local KeybindBtn = Instance.new("TextButton")
				local KeybindBtnC = createCorner(KeybindBtn, 6)
				local KeybindValue = Instance.new("TextButton")
				local KeybindValueC = createCorner(KeybindValue, 6)
				local KeybindL = Instance.new("UIListLayout")
				local UIPadding = Instance.new("UIPadding")

				KeybindModule.Name = "KeybindModule"
				KeybindModule.Parent = Objs
				KeybindModule.BackgroundTransparency = 1.000
				KeybindModule.Size = UDim2.new(0, 428, 0, 38)

				KeybindBtn.Name = "KeybindBtn"
				KeybindBtn.Parent = KeybindModule
				KeybindBtn.BackgroundColor3 = Config.ZyColor
				KeybindBtn.BackgroundTransparency = Config.ZyTransparency
				KeybindBtn.BorderSizePixel = 0
				KeybindBtn.Size = UDim2.new(0, 428, 0, 38)
				KeybindBtn.AutoButtonColor = false
				KeybindBtn.Font = Config.Font
				KeybindBtn.Text = "   " .. text
				KeybindBtn.TextColor3 = Config.TextColor
				KeybindBtn.TextSize = 16.000
				KeybindBtn.TextXAlignment = Enum.TextXAlignment.Left
				createGradient(KeybindBtn)

				KeybindValue.Name = "KeybindValue"
				KeybindValue.Parent = KeybindBtn
				KeybindValue.BackgroundColor3 = Config.MainColor
				KeybindValue.BackgroundTransparency = Config.MainTransparency
				KeybindValue.BorderSizePixel = 0
				KeybindValue.Position = UDim2.new(0.763033211, 0, 0.289473683, 0)
				KeybindValue.Size = UDim2.new(0, KeybindValue.TextBounds.X + 30, 0, 28)
				KeybindValue.AutoButtonColor = false
				KeybindValue.Font = Config.Font
				KeybindValue.Text = keyTxt
				KeybindValue.TextColor3 = Config.TextColor
				KeybindValue.TextSize = 14.000

				KeybindL.Name = "KeybindL"
				KeybindL.Parent = KeybindBtn
				KeybindL.HorizontalAlignment = Enum.HorizontalAlignment.Right
				KeybindL.SortOrder = Enum.SortOrder.LayoutOrder
				KeybindL.VerticalAlignment = Enum.VerticalAlignment.Center

				UIPadding.Parent = KeybindBtn
				UIPadding.PaddingRight = UDim.new(0, 6)

				-- 按键触发
				services.UserInputService.InputBegan:Connect(function(inp, gpe)
					if gpe or inp.UserInputType ~= Enum.UserInputType.Keyboard or inp.KeyCode ~= bindKey then return end
					callback(bindKey.Name)
				end)

				-- 绑定修改
				KeybindValue.MouseButton1Click:Connect(function()
					Ripple(KeybindValue)
					KeybindValue.Text = "..."
					wait()
					local key = services.UserInputService.InputEnded:Wait()
					if key.UserInputType ~= Enum.UserInputType.Keyboard then
						KeybindValue.Text = keyTxt
						return
					end
					local keyName = tostring(key.KeyCode.Name)
					if banned[keyName] then
						KeybindValue.Text = keyTxt
						return
					end
					bindKey = Enum.KeyCode[keyName]
					keyTxt = shortNames[keyName] or keyName
					KeybindValue.Text = keyTxt
				end)

				-- 自动调整宽度
				KeybindValue:GetPropertyChangedSignal("TextBounds"):Connect(function()
					KeybindValue.Size = UDim2.new(0, KeybindValue.TextBounds.X + 30, 0, 28)
				end)

				-- 悬停效果
				KeybindBtn.MouseEnter:Connect(function()
					Tween(KeybindBtn, {}, { BackgroundTransparency = 0 })
				end)
				KeybindBtn.MouseLeave:Connect(function()
					Tween(KeybindBtn, {}, { BackgroundTransparency = Config.ZyTransparency })
				end)

				return KeybindBtn
			end

			-- 5. 文本框（原有）
			function section.Textbox(section, text, flag, default, callback)
				local callback = callback or function() end
				assert(text, "No text provided")
				assert(flag, "No flag provided")
				assert(default, "No default text provided")
				library.flags[flag] = default

				local TextboxModule = Instance.new("Frame")
				local TextboxBack = Instance.new("TextButton")
				local TextboxBackC = createCorner(TextboxBack, 6)
				local BoxBG = Instance.new("TextButton")
				local BoxBGC = createCorner(BoxBG, 6)
				local TextBox = Instance.new("TextBox")
				local TextboxBackL = Instance.new("UIListLayout")
				local TextboxBackP = Instance.new("UIPadding")

				TextboxModule.Name = "TextboxModule"
				TextboxModule.Parent = Objs
				TextboxModule.BackgroundTransparency = 1.000
				TextboxModule.Size = UDim2.new(0, 428, 0, 38)

				TextboxBack.Name = "TextboxBack"
				TextboxBack.Parent = TextboxModule
				TextboxBack.BackgroundColor3 = Config.ZyColor
				TextboxBack.BackgroundTransparency = Config.ZyTransparency
				TextboxBack.BorderSizePixel = 0
				TextboxBack.Size = UDim2.new(0, 428, 0, 38)
				TextboxBack.AutoButtonColor = false
				TextboxBack.Font = Config.Font
				TextboxBack.Text = "   " .. text
				TextboxBack.TextColor3 = Config.TextColor
				TextboxBack.TextSize = 16.000
				TextboxBack.TextXAlignment = Enum.TextXAlignment.Left
				createGradient(TextboxBack)

				BoxBG.Name = "BoxBG"
				BoxBG.Parent = TextboxBack
				BoxBG.BackgroundColor3 = Config.MainColor
				BoxBG.BackgroundTransparency = Config.MainTransparency
				BoxBG.BorderSizePixel = 0
				BoxBG.Position = UDim2.new(0.763033211, 0, 0.289473683, 0)
				BoxBG.Size = UDim2.new(0, TextBox.TextBounds.X + 30, 0, 28)
				BoxBG.AutoButtonColor = false
				BoxBG.Font = Config.Font
				BoxBG.Text = ""
				BoxBG.TextColor3 = Config.TextColor
				BoxBG.TextSize = 14.000

				TextBox.Parent = BoxBG
				TextBox.BackgroundTransparency = 1.000
				TextBox.BorderSizePixel = 0
				TextBox.Size = UDim2.new(1, 0, 1, 0)
				TextBox.Font = Config.Font
				TextBox.Text = default
				TextBox.TextColor3 = Config.TextColor
				TextBox.PlaceholderColor3 = Config.PlaceholderColor
				TextBox.TextSize = 14.000

				TextboxBackL.Name = "TextboxBackL"
				TextboxBackL.Parent = TextboxBack
				TextboxBackL.HorizontalAlignment = Enum.HorizontalAlignment.Right
				TextboxBackL.SortOrder = Enum.SortOrder.LayoutOrder
				TextboxBackL.VerticalAlignment = Enum.VerticalAlignment.Center

				TextboxBackP.Name = "TextboxBackP"
				TextboxBackP.Parent = TextboxBack
				TextboxBackP.PaddingRight = UDim.new(0, 6)

				-- 输入确认
				TextBox.FocusLost:Connect(function()
					if TextBox.Text == "" then TextBox.Text = default end
					library.flags[flag] = TextBox.Text
					callback(TextBox.Text)
				end)

				-- 自动调整宽度
				TextBox:GetPropertyChangedSignal("TextBounds"):Connect(function()
					BoxBG.Size = UDim2.new(0, TextBox.TextBounds.X + 30, 0, 28)
				end)

				-- 悬停效果
				TextboxBack.MouseEnter:Connect(function()
					Tween(TextboxBack, {}, { BackgroundTransparency = 0 })
				end)
				TextboxBack.MouseLeave:Connect(function()
					Tween(TextboxBack, {}, { BackgroundTransparency = Config.ZyTransparency })
				end)

				return TextBox
			end

			-- 6. 滑块（原有，新增重置按钮）
			function section.Slider(section, text, flag, default, min, max, precise, callback)
				local callback = callback or function() end
				local min = min or 1
				local max = max or 10
				local default = default or min
				local precise = precise or false
				library.flags[flag] = default
				assert(text, "No text provided")
				assert(flag, "No flag provided")
				assert(default, "No default value provided")

				local SliderModule = Instance.new("Frame")
				local SliderBack = Instance.new("TextButton")
				local SliderBackC = createCorner(SliderBack, 6)
				local SliderBar = Instance.new("Frame")
				local SliderBarC = createCorner(SliderBar, 4)
				local SliderPart = Instance.new("Frame")
				local SliderPartC = createCorner(SliderPart, 4)
				local SliderValBG = Instance.new("TextButton")
				local SliderValBGC = createCorner(SliderValBG, 6)
				local SliderValue = Instance.new("TextBox")
				local MinSlider = Instance.new("TextButton")
				local AddSlider = Instance.new("TextButton")
				local ResetBtn = Instance.new("TextButton") -- 新增：重置按钮

				SliderModule.Name = "SliderModule"
				SliderModule.Parent = Objs
				SliderModule.BackgroundTransparency = 1.000
				SliderModule.Size = UDim2.new(0, 428, 0, 38)

				SliderBack.Name = "SliderBack"
				SliderBack.Parent = SliderModule
				SliderBack.BackgroundColor3 = Config.ZyColor
				SliderBack.BackgroundTransparency = Config.ZyTransparency
				SliderBack.BorderSizePixel = 0
				SliderBack.Size = UDim2.new(0, 428, 0, 38)
				SliderBack.AutoButtonColor = false
				SliderBack.Font = Config.Font
				SliderBack.Text = "   " .. text
				SliderBack.TextColor3 = Config.TextColor
				SliderBack.TextSize = 16.000
				SliderBack.TextXAlignment = Enum.TextXAlignment.Left
				createGradient(SliderBack)

				SliderBar.Name = "SliderBar"
				SliderBar.Parent = SliderBack
				SliderBar.AnchorPoint = Vector2.new(0, 0.5)
				SliderBar.BackgroundColor3 = Config.MainColor
				SliderBar.BackgroundTransparency = Config.MainTransparency
				SliderBar.Position = UDim2.new(0.369000018, 40, 0.5, 0)
				SliderBar.Size = UDim2.new(0, 140, 0, 12)

				SliderPart.Name = "SliderPart"
				SliderPart.Parent = SliderBar
				SliderPart.BackgroundColor3 = Config.HighlightColor
				SliderPart.Size = UDim2.new(0, 54, 0, 13)

				SliderValBG.Name = "SliderValBG"
				SliderValBG.Parent = SliderBack
				SliderValBG.BackgroundColor3 = Config.MainColor
				SliderValBG.BackgroundTransparency = Config.MainTransparency
				SliderValBG.Position = UDim2.new(0.883177578, 0, 0.131578952, 0)
				SliderValBG.Size = UDim2.new(0, 44, 0, 28)
				SliderValBG.AutoButtonColor = false
				SliderValBG.Text = ""

				SliderValue.Name = "SliderValue"
				SliderValue.Parent = SliderValBG
				SliderValue.BackgroundTransparency = 1.000
				SliderValue.BorderSizePixel = 0
				SliderValue.Size = UDim2.new(1, 0, 1, 0)
				SliderValue.Font = Config.Font
				SliderValue.Text = tostring(default)
				SliderValue.TextColor3 = Config.TextColor
				SliderValue.TextSize = 14.000

				-- 加减按钮
				MinSlider.Name = "MinSlider"
				MinSlider.Parent = SliderModule
				MinSlider.BackgroundTransparency = 1.000
				MinSlider.Position = UDim2.new(0.296728969, 40, 0.236842096, 0)
				MinSlider.Size = UDim2.new(0, 20, 0, 20)
				MinSlider.Font = Config.Font
				MinSlider.Text = "-"
				MinSlider.TextColor3 = Config.TextColor
				MinSlider.TextSize = 24.000

				AddSlider.Name = "AddSlider"
				AddSlider.Parent = SliderModule
				AddSlider.AnchorPoint = Vector2.new(0, 0.5)
				AddSlider.BackgroundTransparency = 1.000
				AddSlider.Position = UDim2.new(0.810906529, 0, 0.5, 0)
				AddSlider.Size = UDim2.new(0, 20, 0, 20)
				AddSlider.Font = Config.Font
				AddSlider.Text = "+"
				AddSlider.TextColor3 = Config.TextColor
				AddSlider.TextSize = 24.000

				-- 新增：重置按钮
				ResetBtn.Name = "ResetBtn"
				ResetBtn.Parent = SliderModule
				ResetBtn.BackgroundColor3 = Config.HighlightColor
				ResetBtn.BackgroundTransparency = 0.3
				ResetBtn.Position = UDim2.new(0.92, 0, 0.236842096, 0)
				ResetBtn.Size = UDim2.new(0, 16, 0, 16)
				ResetBtn.Font = Config.Font
				ResetBtn.Text = "↺"
				ResetBtn.TextColor3 = Config.TextColor
				ResetBtn.TextSize = 12
				createCorner(ResetBtn, 8)

				-- 滑块控制函数
				local funcs = {
					SetValue = function(self, value)
						local percent = (mouse.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X
						if value then percent = (value - min) / (max - min) end
						percent = math.clamp(percent, 0, 1)
						value = value or (precise and tonumber(string.format("%.1f", min + (max - min)*percent)) or math.floor(min + (max - min)*percent))
						library.flags[flag] = tonumber(value)
						SliderValue.Text = tostring(value)
						SliderPart.Size = UDim2.new(percent, 0, 1, 0)
						callback(tonumber(value))
					end,
					Reset = function(self)
						self:SetValue(default)
					end
				}

				-- 加减逻辑
				MinSlider.MouseButton1Click:Connect(function()
					Ripple(MinSlider)
					funcs:SetValue(library.flags[flag] - 1)
				end)
				AddSlider.MouseButton1Click:Connect(function()
					Ripple(AddSlider)
					funcs:SetValue(library.flags[flag] + 1)
				end)
				ResetBtn.MouseButton1Click:Connect(function()
					Ripple(ResetBtn)
					funcs:Reset()
				end)

				-- 拖拽调整
				local dragging = false
				SliderBar.InputBegan:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						funcs:SetValue()
						dragging = true
					end
				end)
				services.UserInputService.InputEnded:Connect(function(input)
					if dragging and input.UserInputType == Enum.UserInputType.MouseButton1 then
						dragging = false
					end
				end)
				services.UserInputService.InputChanged:Connect(function(input)
					if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
						funcs:SetValue()
					end
				end)

				-- 鼠标滚轮调整（新增）
				SliderBar.MouseEnter:Connect(function()
					services.UserInputService.InputChanged:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseWheel then
							funcs:SetValue(library.flags[flag] + (input.Position.Z > 0 and 1 or -1))
						end
					end)
				end)

				-- 初始值设置
				funcs:SetValue(default)

				-- 悬停效果
				SliderBack.MouseEnter:Connect(function()
					Tween(SliderBack, {}, { BackgroundTransparency = 0 })
				end)
				SliderBack.MouseLeave:Connect(function()
					Tween(SliderBack, {}, { BackgroundTransparency = Config.ZyTransparency })
				end)

				return funcs
			end

			-- 7. 下拉菜单（原有）
			function section.Dropdown(section, text, flag, options, callback)
				local callback = callback or function() end
				local options = options or {}
				assert(text, "No text provided")
				assert(flag, "No flag provided")
				library.flags[flag] = nil

				local DropdownModule = Instance.new("Frame")
				local DropdownTop = Instance.new("TextButton")
				local DropdownTopC = createCorner(DropdownTop, 6)
				local DropdownOpen = Instance.new("TextButton")
				local DropdownText = Instance.new("TextBox")
				local DropdownModuleL = Instance.new("UIListLayout")

				DropdownModule.Name = "DropdownModule"
				DropdownModule.Parent = Objs
				DropdownModule.BackgroundTransparency = 1.000
				DropdownModule.ClipsDescendants = true
				DropdownModule.Size = UDim2.new(0, 428, 0, 38)

				DropdownTop.Name = "DropdownTop"
				DropdownTop.Parent = DropdownModule
				DropdownTop.BackgroundColor3 = Config.ZyColor
				DropdownTop.BackgroundTransparency = Config.ZyTransparency
				DropdownTop.Size = UDim2.new(0, 428, 0, 38)
				DropdownTop.AutoButtonColor = false
				DropdownTop.Font = Config.Font
				DropdownTop.Text = ""
				DropdownTop.TextColor3 = Config.TextColor
				DropdownTop.TextSize = 16.000
				DropdownTop.TextXAlignment = Enum.TextXAlignment.Left
				createGradient(DropdownTop)

				DropdownOpen.Name = "DropdownOpen"
				DropdownOpen.Parent = DropdownTop
				DropdownOpen.AnchorPoint = Vector2.new(0, 0.5)
				DropdownOpen.BackgroundTransparency = 1.000
				DropdownOpen.Position = UDim2.new(0.918383181, 0, 0.5, 0)
				DropdownOpen.Size = UDim2.new(0, 20, 0, 20)
				DropdownOpen.Font = Config.Font
				DropdownOpen.Text = "+"
				DropdownOpen.TextColor3 = Config.TextColor
				DropdownOpen.TextSize = 24.000

				DropdownText.Name = "DropdownText"
				DropdownText.Parent = DropdownTop
				DropdownText.BackgroundTransparency = 1.000
				DropdownText.Position = UDim2.new(0.0373831764, 0, 0, 0)
				DropdownText.Size = UDim2.new(0, 184, 0, 38)
				DropdownText.Font = Config.Font
				DropdownText.PlaceholderColor3 = Config.PlaceholderColor
				DropdownText.PlaceholderText = text
				DropdownText.Text = ""
				DropdownText.TextColor3 = Config.TextColor
				DropdownText.TextSize = 16.000
				DropdownText.TextXAlignment = Enum.TextXAlignment.Left

				DropdownModuleL.Name = "DropdownModuleL"
				DropdownModuleL.Parent = DropdownModule
				DropdownModuleL.SortOrder = Enum.SortOrder.LayoutOrder
				DropdownModuleL.Padding = UDim.new(0, 4)

				-- 选项控制
				local setAllVisible = function()
					for _, v in ipairs(DropdownModule:GetChildren()) do
						if v:IsA("TextButton") and v.Name:match("Option_") then v.Visible = true end
					end
				end

				-- 展开/收起逻辑
				local open = false
				local ToggleDropVis = function()
					open = not open
					if open then setAllVisible() end
					DropdownOpen.Text = open and "-" or "+"
					DropdownModule.Size = UDim2.new(0, 428, 0, open and DropdownModuleL.AbsoluteContentSize.Y + 4 or 38)
				end

				DropdownOpen.MouseButton1Click:Connect(function()
					Ripple(DropdownOpen)
					ToggleDropVis()
				end)

				-- 选项API
				local funcs = {
					AddOption = function(self, option)
						local Option = Instance.new("TextButton")
						local OptionC = createCorner(Option, 6)

						Option.Name = "Option_" .. option
						Option.Parent = DropdownModule
						Option.BackgroundColor3 = Config.ZyColor
						Option.BackgroundTransparency = Config.ZyTransparency
						Option.Position = UDim2.new(0, 0, 0.328125, 0)
						Option.Size = UDim2.new(0, 428, 0, 26)
						Option.AutoButtonColor = false
						Option.Font = Config.Font
						Option.Text = option
						Option.TextColor3 = Config.TextColor
						Option.TextSize = 14.000

						-- 选中逻辑
						Option.MouseButton1Click:Connect(function()
							Ripple(Option)
							ToggleDropVis()
							callback(Option.Text)
							DropdownText.Text = Option.Text
							library.flags[flag] = Option.Text
							Tween(Option, {}, { BackgroundColor3 = Config.HighlightColor, BackgroundTransparency = 0 })
							task.wait(0.5)
							Tween(Option, {}, { BackgroundColor3 = Config.ZyColor, BackgroundTransparency = Config.ZyTransparency })
						end)

						-- 悬停效果
						Option.MouseEnter:Connect(function()
							Tween(Option, {}, { BackgroundTransparency = 0 })
						end)
						Option.MouseLeave:Connect(function()
							Tween(Option, {}, { BackgroundTransparency = Config.ZyTransparency })
						end)
					end,
					RemoveOption = function(self, option)
						local opt = DropdownModule:FindFirstChild("Option_" .. option)
						if opt then opt:Destroy() end
					end,
					SetOptions = function(self, opts)
						for _, v in ipairs(DropdownModule:GetChildren()) do
							if v.Name:match("Option_") then v:Destroy() end
						end
						for _, v in ipairs(opts) do self:AddOption(v) end
					end
				}

				funcs:SetOptions(options)
				return funcs
			end
			-- 8. 复选框（新增）
			function section.Checkbox(section, text, flag, default, callback)
				local callback = callback or function() end
				local default = default or false
				library.flags[flag] = default

				local CheckModule = Instance.new("Frame")
				local CheckBtn = Instance.new("TextButton")
				local CheckBtnC = createCorner(CheckBtn, 4)
				local CheckBox = Instance.new("Frame")
				local CheckBoxC = createCorner(CheckBox, 2)
				local CheckIcon = Instance.new("ImageLabel")
				local CheckText = Instance.new("TextLabel")

				CheckModule.Name = "CheckboxModule"
				CheckModule.Parent = Objs
				CheckModule.BackgroundTransparency = 1.000
				CheckModule.Size = UDim2.new(0, 428, 0, 32)

				CheckBtn.Name = "CheckBtn"
				CheckBtn.Parent = CheckModule
				CheckBtn.BackgroundColor3 = Config.ZyColor
				CheckBtn.BackgroundTransparency = Config.ZyTransparency
				CheckBtn.Size = UDim2.new(0, 428, 0, 32)
				CheckBtn.AutoButtonColor = false
				CheckBtn.Text = ""
				createGradient(CheckBtn)

				CheckBox.Name = "CheckBox"
				CheckBox.Parent = CheckBtn
				CheckBox.BackgroundColor3 = Config.MainColor
				CheckBox.BackgroundTransparency = Config.MainTransparency
				CheckBox.BorderColor3 = Config.HighlightColor
				CheckBox.BorderSizePixel = 2
				CheckBox.Position = UDim2.new(0.02, 0, 0.15, 0)
				CheckBox.Size = UDim2.new(0, 22, 0, 22)

				CheckIcon.Name = "CheckIcon"
				CheckIcon.Parent = CheckBox
				CheckIcon.BackgroundTransparency = 1.000
				CheckIcon.Size = UDim2.new(0, 16, 0, 16)
				CheckIcon.Position = UDim2.new(0.15, 0, 0.15, 0)
				CheckIcon.Image = "rbxassetid://6031302932"
				CheckIcon.ImageColor3 = Config.HighlightColor
				CheckIcon.ImageTransparency = default and 0 or 1.000

				CheckText.Name = "CheckText"
				CheckText.Parent = CheckBtn
				CheckText.BackgroundTransparency = 1.000
				CheckText.Position = UDim2.new(0.08, 0, 0, 0)
				CheckText.Size = UDim2.new(0, 380, 0, 32)
				CheckText.Font = Config.Font
				CheckText.Text = text
				CheckText.TextColor3 = Config.TextColor
				CheckText.TextSize = 14.000
				CheckText.TextXAlignment = Enum.TextXAlignment.Left

				-- 选中逻辑
				CheckBtn.MouseButton1Click:Connect(function()
					Ripple(CheckBtn)
					local isChecked = not library.flags[flag]
					library.flags[flag] = isChecked
					CheckIcon.ImageTransparency = isChecked and 0 or 1
					Tween(CheckBox, {}, { BackgroundColor3 = isChecked and Config.HighlightColor or Config.MainColor })
					Tween(CheckBox, {}, { BackgroundTransparency = isChecked and 0.2 or Config.MainTransparency })
					callback(isChecked)
				end)

				-- 初始状态设置
				if default then
					Tween(CheckBox, {}, { BackgroundColor3 = Config.HighlightColor, BackgroundTransparency = 0.2 })
				end

				-- 悬停效果
				CheckBtn.MouseEnter:Connect(function()
					Tween(CheckBtn, {}, { BackgroundTransparency = 0 })
				end)
				CheckBtn.MouseLeave:Connect(function()
					Tween(CheckBtn, {}, { BackgroundTransparency = Config.ZyTransparency })
				end)

				return {
					SetChecked = function(self, state)
						library.flags[flag] = state
						CheckIcon.ImageTransparency = state and 0 or 1
						Tween(CheckBox, {}, { BackgroundColor3 = state and Config.HighlightColor or Config.MainColor })
						Tween(CheckBox, {}, { BackgroundTransparency = state and 0.2 or Config.MainTransparency })
						callback(state)
					end,
					IsChecked = function(self)
						return library.flags[flag]
					end
				}
			end

			-- 9. 数值输入框（新增）
			function section.NumberInput(section, text, flag, default, min, max, step, callback)
				local callback = callback or function() end
				local min = min or 0
				local max = max or 100
				local step = step or 1
				local default = math.clamp(default, min, max)
				library.flags[flag] = default

				local NumModule = Instance.new("Frame")
				local NumBack = Instance.new("TextButton")
				local NumBackC = createCorner(NumBack, 6)
				local NumInput = Instance.new("TextBox")
				local NumInputC = createCorner(NumInput, 4)
				local MinBtn = Instance.new("TextButton")
				local MinBtnC = createCorner(MinBtn, 4)
				local AddBtn = Instance.new("TextButton")
				local AddBtnC = createCorner(AddBtn, 4)

				NumModule.Name = "NumberInputModule"
				NumModule.Parent = Objs
				NumModule.BackgroundTransparency = 1.000
				NumModule.Size = UDim2.new(0, 428, 0, 38)

				NumBack.Name = "NumBack"
				NumBack.Parent = NumModule
				NumBack.BackgroundColor3 = Config.ZyColor
				NumBack.BackgroundTransparency = Config.ZyTransparency
				NumBack.Size = UDim2.new(0, 428, 0, 38)
				NumBack.AutoButtonColor = false
				NumBack.Font = Config.Font
				NumBack.Text = "   " .. text
				NumBack.TextColor3 = Config.TextColor
				NumBack.TextSize = 16.000
				NumBack.TextXAlignment = Enum.TextXAlignment.Left
				createGradient(NumBack)

				NumInput.Name = "NumInput"
				NumInput.Parent = NumBack
				NumInput.BackgroundColor3 = Config.MainColor
				NumInput.BackgroundTransparency = Config.MainTransparency
				NumInput.Position = UDim2.new(0.7, 0, 0.2, 0)
				NumInput.Size = UDim2.new(0, 60, 0, 26)
				NumInput.Font = Config.Font
				NumInput.Text = tostring(default)
				NumInput.TextColor3 = Config.TextColor
				NumInput.TextSize = 14.000
				NumInput.TextXAlignment = Enum.TextXAlignment.Center

				MinBtn.Name = "MinBtn"
				MinBtn.Parent = NumBack
				MinBtn.BackgroundColor3 = Config.HighlightColor
				MinBtn.BackgroundTransparency = 0.2
				MinBtn.Position = UDim2.new(0.65, 0, 0.2, 0)
				MinBtn.Size = UDim2.new(0, 24, 0, 26)
				MinBtn.Font = Config.Font
				MinBtn.Text = "-"
				MinBtn.TextColor3 = Config.TextColor
				MinBtn.TextSize = 18.000

				AddBtn.Name = "AddBtn"
				AddBtn.Parent = NumBack
				AddBtn.BackgroundColor3 = Config.HighlightColor
				AddBtn.BackgroundTransparency = 0.2
				AddBtn.Position = UDim2.new(0.82, 0, 0.2, 0)
				AddBtn.Size = UDim2.new(0, 24, 0, 26)
				AddBtn.Font = Config.Font
				AddBtn.Text = "+"
				AddBtn.TextColor3 = Config.TextColor
				AddBtn.TextSize = 18.000

				-- 输入过滤
				NumInput:GetPropertyChangedSignal("Text"):Connect(function()
					NumInput.Text = NumInput.Text:gsub("%D+", "")
					local val = tonumber(NumInput.Text) or default
					val = math.clamp(val, min, max)
					NumInput.Text = tostring(val)
					NumInput.TextColor3 = (val == min or val == max) and Color3.fromRGB(255,87,87) or Config.TextColor
				end)

				-- 数值更新函数
				local updateVal = function(delta)
					local val = tonumber(NumInput.Text) or default
					val = math.clamp(val + delta, min, max)
					NumInput.Text = tostring(val)
					library.flags[flag] = val
					callback(val)
				end

				-- 加减按钮逻辑
				MinBtn.MouseButton1Click:Connect(function()
					Ripple(MinBtn)
					updateVal(-step)
				end)
				AddBtn.MouseButton1Click:Connect(function()
					Ripple(AddBtn)
					updateVal(step)
				end)

				-- 输入确认
				NumInput.FocusLost:Connect(function()
					local val = tonumber(NumInput.Text) or default
					updateVal(val - (tonumber(NumInput.Text) or default))
				end)

				-- 悬停效果
				for _, btn in ipairs({MinBtn, AddBtn, NumBack}) do
					btn.MouseEnter:Connect(function()
						Tween(btn, {}, { BackgroundTransparency = 0 })
					end)
					btn.MouseLeave:Connect(function()
						Tween(btn, {}, { BackgroundTransparency = btn == NumBack and Config.ZyTransparency or 0.2 })
					end)
				end

				return {
					SetValue = function(self, val)
						updateVal(val - (tonumber(NumInput.Text) or default))
					end,
					GetValue = function(self)
						return library.flags[flag]
					end
				}
			end

			-- 10. 标签页分组（新增）
			function section.TabGroup(section, name)
				local GroupModule = Instance.new("Frame")
				local GroupBack = Instance.new("Frame")
				local GroupBackC = createCorner(GroupBack, 6)
				local GroupTitle = Instance.new("TextLabel")
				local TabBar = Instance.new("ScrollingFrame")
				local TabBarL = Instance.new("UIListLayout")
				local ContentArea = Instance.new("Frame")

				GroupModule.Name = "TabGroupModule"
				GroupModule.Parent = Objs
				GroupModule.BackgroundTransparency = 1.000
				GroupModule.Size = UDim2.new(1, 0, 0, 200)

				GroupBack.Name = "GroupBack"
				GroupBack.Parent = GroupModule
				GroupBack.BackgroundColor3 = Config.ZyColor
				GroupBack.BackgroundTransparency = Config.ZyTransparency
				GroupBack.Size = UDim2.new(1, 0, 1, 0)
				createGradient(GroupBack)

				GroupTitle.Name = "GroupTitle"
				GroupTitle.Parent = GroupBack
				GroupTitle.BackgroundTransparency = 1.000
				GroupTitle.Position = UDim2.new(0.02, 0, 0, 0)
				GroupTitle.Size = UDim2.new(0, 200, 0, 28)
				GroupTitle.Font = Config.Font
				GroupTitle.Text = name
				GroupTitle.TextColor3 = Config.TextColor
				GroupTitle.TextSize = 14.000

				-- 子标签栏
				TabBar.Name = "TabBar"
				TabBar.Parent = GroupBack
				TabBar.BackgroundTransparency = 1.000
				TabBar.Position = UDim2.new(0, 0, 0, 32)
				TabBar.Size = UDim2.new(1, 0, 0, 28)
				TabBar.CanvasSize = UDim2.new(0, 0, 0, 28)
				TabBar.ScrollBarThickness = 0
				TabBar.ScrollDirection = Enum.ScrollDirection.X

				TabBarL.Name = "TabBarL"
				TabBarL.Parent = TabBar
				TabBarL.SortOrder = Enum.SortOrder.LayoutOrder
				TabBarL.Padding = UDim.new(0, 8)
				TabBarL.FillDirection = Enum.FillDirection.Horizontal
				TabBarL.VerticalAlignment = Enum.VerticalAlignment.Center

				-- 内容区域
				ContentArea.Name = "ContentArea"
				ContentArea.Parent = GroupBack
				ContentArea.BackgroundTransparency = 1.000
				ContentArea.Position = UDim2.new(0, 0, 0, 64)
				ContentArea.Size = UDim2.new(1, 0, 1, -64)

				local currentTab = nil
				local tabGroup = {
					tabs = {},
					-- 添加子标签
					AddTab = function(self, tabName, iconId)
						local TabBtn = Instance.new("TextButton")
						local TabIcon = Instance.new("ImageLabel")
						local TabText = Instance.new("TextLabel")
						local TabContent = Instance.new("Frame")
						local ContentL = Instance.new("UIListLayout")

						-- 子标签按钮
						TabBtn.Name = "SubTabBtn_" .. tabName
						TabBtn.Parent = TabBar
						TabBtn.BackgroundColor3 = Config.MainColor
						TabBtn.BackgroundTransparency = Config.MainTransparency
						TabBtn.Size = UDim2.new(0, #tabName*12 + 40, 0, 24)
						TabBtn.AutoButtonColor = false
						TabBtn.Font = Config.Font
						TabBtn.Text = ""

						-- 子标签图标
						TabIcon.Name = "SubTabIcon"
						TabIcon.Parent = TabBtn
						TabIcon.BackgroundTransparency = 1.000
						TabIcon.Position = UDim2.new(0, 8, 0, 2)
						TabIcon.Size = UDim2.new(0, 20, 0, 20)
						TabIcon.Image = "rbxassetid://" .. (iconId or 4370341699)
						TabIcon.ImageTransparency = 0.3

						-- 子标签文本
						TabText.Name = "SubTabText"
						TabText.Parent = TabBtn
						TabText.BackgroundTransparency = 1.000
						TabText.Position = UDim2.new(0, 32, 0, 0)
						TabText.Size = UDim2.new(0, #tabName*12, 0, 24)
						TabText.Font = Config.Font
						TabText.Text = tabName
						TabText.TextColor3 = Config.TextColor
						TabText.TextSize = 12.000
						TabText.TextTransparency = 0.3

						-- 子标签内容区
						TabContent.Name = "SubTabContent_" .. tabName
						TabContent.Parent = ContentArea
						TabContent.BackgroundTransparency = 1.000
						TabContent.Size = UDim2.new(1, 0, 1, 0)
						TabContent.Visible = false

						-- 内容区布局
						ContentL.Name = "ContentL"
						ContentL.Parent = TabContent
						ContentL.SortOrder = Enum.SortOrder.LayoutOrder
						ContentL.Padding = UDim.new(0, 8)

						-- 子标签切换逻辑
						TabBtn.MouseButton1Click:Connect(function()
							Ripple(TabBtn)
							if currentTab then
								Tween(currentTab.btn, {}, { BackgroundTransparency = Config.MainTransparency })
								Tween(currentTab.icon, {}, { ImageTransparency = 0.3 })
								Tween(currentTab.text, {}, { TextTransparency = 0.3 })
								currentTab.content.Visible = false
							end

							currentTab = { btn = TabBtn, icon = TabIcon, text = TabText, content = TabContent }
							Tween(TabBtn, {}, { BackgroundTransparency = 0 })
							Tween(TabIcon, {}, { ImageTransparency = 0 })
							Tween(TabText, {}, { TextTransparency = 0 })
							TabContent.Visible = true
						end)

						-- 子标签API
						local subTab = {
							content = TabContent,
							layout = ContentL,
							-- 添加按钮
							AddButton = function(self, btnText, btnCallback)
								local Btn = Instance.new("TextButton")
								local BtnC = createCorner(Btn, 4)

								Btn.Name = "SubTabBtn_" .. btnText
								Btn.Parent = TabContent
								Btn.BackgroundColor3 = Config.ZyColor
								Btn.BackgroundTransparency = Config.ZyTransparency
								Btn.Position = UDim2.new(0.02, 0, 0, #TabContent:GetChildren()*40)
								Btn.Size = UDim2.new(0, 180, 0, 32)
								Btn.Font = Config.Font
								Btn.Text = btnText
								Btn.TextColor3 = Config.TextColor
								Btn.TextSize = 14.000

								Btn.MouseButton1Click:Connect(function()
									Ripple(Btn)
									btnCallback()
								end)

								-- 悬停效果
								Btn.MouseEnter:Connect(function()
									Tween(Btn, {}, { BackgroundTransparency = 0 })
								end)
								Btn.MouseLeave:Connect(function()
									Tween(Btn, {}, { BackgroundTransparency = Config.ZyTransparency })
								end)

								return Btn
							end,
							-- 添加开关
							AddToggle = function(self, toggleText, flag, enabled, callback)
								local toggle = section.Toggle(section, toggleText, flag, enabled, callback)
								toggle.Module.Parent = TabContent
								return toggle
							end
						}

						table.insert(self.tabs, subTab)
						-- 默认选中第一个子标签
						if #self.tabs == 1 then
							TabBtn.MouseButton1Click:Fire()
						end

						return subTab
					end,
					-- 获取当前选中标签
					GetCurrentTab = function(self)
						return currentTab and currentTab.content or nil
					end
				}

				-- 自动调整标签栏宽度
				TabBarL:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
					TabBar.CanvasSize = UDim2.new(0, TabBarL.AbsoluteContentSize.X, 0, 28)
				end)

				return tabGroup
			end

			-- 11. 滑动面板（新增）
			function section.SlidePanel(section, text, direction)
				local SlideModule = Instance.new("Frame")
				local SlideBack = Instance.new("Frame")
				local SlideBackC = createCorner(SlideBack, 6)
				local SlideTitle = Instance.new("TextLabel")
				local SlideArea = Instance.new("Frame")
				local SlideContent = Instance.new("Frame")
				local LeftArrow = Instance.new("ImageButton")
				local RightArrow = Instance.new("ImageButton")
				local AutoPlay = nil

				-- 基础配置
				local isHorizontal = direction == "horizontal"
				local itemSize = isHorizontal and UDim2.new(0, 120, 0, 160) or UDim2.new(0, 280, 0, 100)
				local gap = 16
				local currentIndex = 1
				local items = {}

				-- 基础布局
				SlideModule.Name = "SlidePanelModule"
				SlideModule.Parent = Objs
				SlideModule.BackgroundTransparency = 1.000
				SlideModule.Size = isHorizontal and UDim2.new(1, 0, 0, 200) or UDim2.new(1, 0, 0, 320)

				SlideBack.Name = "SlideBack"
				SlideBack.Parent = SlideModule
				SlideBack.BackgroundColor3 = Config.ZyColor
				SlideBack.BackgroundTransparency = Config.ZyTransparency
				SlideBack.Size = UDim2.new(1, 0, 1, 0)
				createGradient(SlideBack)

				SlideTitle.Name = "SlideTitle"
				SlideTitle.Parent = SlideBack
				SlideTitle.BackgroundTransparency = 1.000
				SlideTitle.Position = UDim2.new(0.02, 0, 0, 0)
				SlideTitle.Size = UDim2.new(0, 200, 0, 28)
				SlideTitle.Font = Config.Font
				SlideTitle.Text = text
				SlideTitle.TextColor3 = Config.TextColor
				SlideTitle.TextSize = 14.000

				-- 滑动区域
				SlideArea.Name = "SlideArea"
				SlideArea.Parent = SlideBack
				SlideArea.BackgroundTransparency = 1.000
				SlideArea.Position = UDim2.new(0, 0, 0, 32)
				SlideArea.Size = isHorizontal and UDim2.new(1, 0, 0, 160) or UDim2.new(1, 0, 0, 280)
				SlideArea.ClipsDescendants = true

				SlideContent.Name = "SlideContent"
				SlideContent.Parent = SlideArea
				SlideContent.BackgroundTransparency = 1.000
				SlideContent.Position = UDim2.new(0, 0, 0, 0)
				SlideContent.Size = UDim2.new(1, 0, 1, 0)

				-- 箭头按钮配置
				local arrowProps = {
					BackgroundTransparency = 1.000,
					Image = "rbxassetid://6031302934",
					ImageColor3 = Config.HighlightColor,
					ImageTransparency = 0.500,
					Size = UDim2.new(0, 32, 0, 32)
				}

				-- 左箭头
				LeftArrow.Name = "LeftArrow"
				LeftArrow.Parent = SlideArea
				LeftArrow.Position = UDim2.new(0.01, 0, 0.5, -16)
				LeftArrow.Rotation = isHorizontal and 180 or 90
				for k, v in pairs(arrowProps) do LeftArrow[k] = v end

				-- 右箭头
				RightArrow.Name = "RightArrow"
				RightArrow.Parent = SlideArea
				RightArrow.Position = UDim2.new(0.98, -32, 0.5, -16)
				RightArrow.Rotation = isHorizontal and 0 or 270
				for k, v in pairs(arrowProps) do RightArrow[k] = v end

				-- 滑动更新函数
				local updateSlide = function()
					local offset = (currentIndex - 1) * (itemSize.X.Offset + gap)
					Tween(SlideContent, {0.3, "Quad", "Out"}, {
						Position = isHorizontal and UDim2.new(0, -offset, 0, 0) or UDim2.new(0, 0, 0, -offset)
					})
					-- 边界隐藏箭头
					LeftArrow.Visible = currentIndex > 1
					RightArrow.Visible = currentIndex < #items
				end

				-- 拖拽滑动
				local dragStart = nil
				SlideArea.InputBegan:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						dragStart = isHorizontal and input.Position.X or input.Position.Y
					end
				end)

				SlideArea.InputEnded:Connect(function(input)
					if not dragStart then return end
					local dragEnd = isHorizontal and input.Position.X or input.Position.Y
					local delta = dragEnd - dragStart
					if math.abs(delta) > 30 then
						currentIndex = math.clamp(currentIndex + (delta > 0 and -1 or 1), 1, #items)
						updateSlide()
					end
					dragStart = nil
				end)

				-- 箭头点击逻辑
				LeftArrow.MouseButton1Click:Connect(function()
					Ripple(LeftArrow)
					currentIndex = math.max(currentIndex - 1, 1)
					updateSlide()
				end)

				RightArrow.MouseButton1Click:Connect(function()
					Ripple(RightArrow)
					currentIndex = math.min(currentIndex + 1, #items)
					updateSlide()
				end)

				-- 滑动面板API
				local slidePanel = {
					-- 添加滑动项
					AddItem = function(self, itemName, imageId)
						local Item = Instance.new("Frame")
						local ItemBg = Instance.new("Frame")
						local ItemBgC = createCorner(ItemBg, 4)
						local ItemImg = Instance.new("ImageLabel")
						local ItemText = Instance.new("TextLabel")

						Item.Name = "SlideItem_" .. itemName
						Item.Parent = SlideContent
						Item.BackgroundTransparency = 1.000
						Item.Position = UDim2.new(0, (#items)*(itemSize.X.Offset + gap), 0, 0)
						Item.Size = itemSize

						ItemBg.Name = "ItemBg"
						ItemBg.Parent = Item
						ItemBg.BackgroundColor3 = Config.MainColor
						ItemBg.BackgroundTransparency = Config.MainTransparency
						ItemBg.Size = UDim2.new(1, 0, 1, 0)

						ItemImg.Name = "ItemImg"
						ItemImg.Parent = ItemBg
						ItemImg.BackgroundTransparency = 1.000
						ItemImg.Position = UDim2.new(0.05, 0, 0.05, 0)
						ItemImg.Size = isHorizontal and UDim2.new(0, 110, 0, 110) or UDim2.new(0, 270, 0, 60)
						ItemImg.Image = "rbxassetid://" .. (imageId or 4370341699)
						ItemImg.ScaleType = Enum.ScaleType.Fit

						ItemText.Name = "ItemText"
						ItemText.Parent = ItemBg
						ItemText.BackgroundTransparency = 1.000
						ItemText.Position = UDim2.new(0, 0, isHorizontal and 0.7, 0.75)
						ItemText.Size = UDim2.new(1, 0, 0, 24)
						ItemText.Font = Config.Font
						ItemText.Text = itemName
						ItemText.TextColor3 = Config.TextColor
						ItemText.TextSize = 12.000
						ItemText.TextXAlignment = Enum.TextXAlignment.Center

						table.insert(items, Item)
						-- 更新内容区尺寸
						SlideContent.Size = isHorizontal and 
							UDim2.new(0, #items*(itemSize.X.Offset + gap) - gap, 1, 0) or 
							UDim2.new(1, 0, 0, #items*(itemSize.Y.Offset + gap) - gap)
						updateSlide()

						-- 悬停效果
						ItemBg.MouseEnter:Connect(function()
							Tween(ItemBg, {}, { BackgroundTransparency = 0 })
							Tween(Item, {}, { Size = itemSize + UDim2.new(0, 8, 0, 8) })
						end)
						ItemBg.MouseLeave:Connect(function()
							Tween(ItemBg, {}, { BackgroundTransparency = Config.MainTransparency })
							Tween(Item, {}, { Size = itemSize })
						end)

						return Item
					end,
					-- 开启自动轮播
					EnableAutoPlay = function(self, interval)
						if AutoPlay then task.cancel(AutoPlay) end
						AutoPlay = task.spawn(function()
							while true do
								task.wait(interval)
								currentIndex = currentIndex >= #items and 1 or currentIndex + 1
								updateSlide()
							end
						end)

						-- 悬停暂停
						SlideArea.MouseEnter:Connect(function()
							if AutoPlay then task.pause(AutoPlay) end
						end)
						SlideArea.MouseLeave:Connect(function()
							if AutoPlay then task.resume(AutoPlay) end
						end)
					end,
					-- 获取当前选中项
					GetCurrentItem = function(self)
						return items[currentIndex]
					end
				}

				return slidePanel
			end

			-- 12. 开关组（新增）
			function section.ToggleGroup(section, text)
				local GroupModule = Instance.new("Frame")
				local GroupTitle = Instance.new("TextLabel")
				local ToggleContainer = Instance.new("Frame")
				local ToggleContainerL = Instance.new("UIListLayout")

				GroupModule.Name = "ToggleGroupModule"
				GroupModule.Parent = Objs
				GroupModule.BackgroundTransparency = 1.000
				GroupModule.Size = UDim2.new(1, 0, 0, 100)

				GroupTitle.Name = "GroupTitle"
				GroupTitle.Parent = GroupModule
				GroupTitle.BackgroundTransparency = 1.000
				GroupTitle.Position = UDim2.new(0, 0, 0, 0)
				GroupTitle.Size = UDim2.new(1, 0, 0, 28)
				GroupTitle.Font = Config.Font
				GroupTitle.Text = text
				GroupTitle.TextColor3 = Config.TextColor
				GroupTitle.TextSize = 14.000

				ToggleContainer.Name = "ToggleContainer"
				ToggleContainer.Parent = GroupModule
				ToggleContainer.BackgroundTransparency = 1.000
				ToggleContainer.Position = UDim2.new(0, 0, 0, 32)
				ToggleContainer.Size = UDim2.new(1, 0, 0, 68)

				ToggleContainerL.Name = "ToggleContainerL"
				ToggleContainerL.Parent = ToggleContainer
				ToggleContainerL.SortOrder = Enum.SortOrder.LayoutOrder
				ToggleContainerL.Padding = UDim.new(0, 8)
				ToggleContainerL.FillDirection = Enum.FillDirection.Horizontal

				local currentSelected = nil
				local toggleGroup = {
					toggles = {},
					-- 添加开关
					AddToggle = function(self, toggleText, flag, callback)
						local callback = callback or function() end
						library.flags[flag] = false

						local Toggle = Instance.new("TextButton")
						local ToggleC = createCorner(Toggle, 6)
						local ToggleText = Instance.new("TextLabel")

						Toggle.Name = "GroupToggle_" .. toggleText
						Toggle.Parent = ToggleContainer
						Toggle.BackgroundColor3 = Config.MainColor
						Toggle.BackgroundTransparency = Config.MainTransparency
						Toggle.Size = UDim2.new(0, #toggleText*12 + 24, 0, 32)
						Toggle.AutoButtonColor = false
						Toggle.Font = Config.Font
						Toggle.Text = ""

						ToggleText.Name = "ToggleText"
						ToggleText.Parent = Toggle
						ToggleText.BackgroundTransparency = 1.000
						ToggleText.Position = UDim2.new(0, 12, 0, 0)
						ToggleText.Size = UDim2.new(0, #toggleText*12, 0, 32)
						ToggleText.Font = Config.Font
						ToggleText.Text = toggleText
						ToggleText.TextColor3 = Config.TextColor
						ToggleText.TextSize = 14.000

						-- 选中逻辑
						Toggle.MouseButton1Click:Connect(function()
							Ripple(Toggle)
							if currentSelected then
								Tween(currentSelected.toggle, {}, { 
									BackgroundTransparency = Config.MainTransparency,
									BackgroundColor3 = Config.MainColor
								})
								library.flags[currentSelected.flag] = false
								currentSelected.callback(false)
							end

							currentSelected = { toggle = Toggle, flag = flag, callback = callback }
							Tween(Toggle, {}, { 
								BackgroundTransparency = 0,
								BackgroundColor3 = Config.HighlightColor
							})
							library.flags[flag] = true
							callback(true)
						end)

						-- 悬停效果
						Toggle.MouseEnter:Connect(function()
							Tween(Toggle, {}, { BackgroundTransparency = currentSelected and (currentSelected.toggle == Toggle and 0 or 0.1) or 0.1 })
						end)
						Toggle.MouseLeave:Connect(function()
							Tween(Toggle, {}, { BackgroundTransparency = currentSelected and (currentSelected.toggle == Toggle and 0 or Config.MainTransparency) or Config.MainTransparency })
						end)

						table.insert(self.toggles, { toggle = Toggle, flag = flag, callback = callback })
						return Toggle
					end,
					-- 设置默认选中
					SetDefault = function(self, defaultFlag)
						for _, toggle in ipairs(self.toggles) do
							if toggle.flag == defaultFlag then
								toggle.toggle.MouseButton1Click:Fire()
								break
							end
						end
					end,
					-- 获取当前选中
					GetSelected = function(self)
						return currentSelected and currentSelected.flag or nil
					end
				}

				return toggleGroup
			end

			-- 13. 文本滚动框（新增）
			function section.ScrollText(section, text, content, highlightColor)
				local TextModule = Instance.new("Frame")
				local TextBack = Instance.new("Frame")
				local TextBackC = createCorner(TextBack, 6)
				local TextTitle = Instance.new("TextLabel")
				local ScrollArea = Instance.new("ScrollingFrame")
				local ScrollContent = Instance.new("Frame")
				local ScrollText = Instance.new("TextLabel")
				local ScrollL = Instance.new("UIListLayout")

				TextModule.Name = "ScrollTextModule"
				TextModule.Parent = Objs
				TextModule.BackgroundTransparency = 1.000
				TextModule.Size = UDim2.new(1, 0, 0, 180)

				TextBack.Name = "TextBack"
				TextBack.Parent = TextModule
				TextBack.BackgroundColor3 = Config.ZyColor
				TextBack.BackgroundTransparency = Config.ZyTransparency
				TextBack.Size = UDim2.new(1, 0, 1, 0)
				createGradient(TextBack)

				TextTitle.Name = "TextTitle"
				TextTitle.Parent = TextBack
				TextTitle.BackgroundTransparency = 1.000
				TextTitle.Position = UDim2.new(0.02, 0, 0, 0)
				TextTitle.Size = UDim2.new(0, 200, 0, 28)
				TextTitle.Font = Config.Font
				TextTitle.Text = text
				TextTitle.TextColor3 = Config.TextColor
				TextTitle.TextSize = 14.000

				-- 滚动区域
				ScrollArea.Name = "ScrollArea"
				ScrollArea.Parent = TextBack
				ScrollArea.BackgroundTransparency = 1.000
				ScrollArea.Position = UDim2.new(0.02, 0, 0, 32)
				ScrollArea.Size = UDim2.new(0.96, 0, 0, 140)
				ScrollArea.CanvasSize = UDim2.new(0, 0, 0, 0)
				ScrollArea.ScrollBarThickness = 4
				ScrollArea.ScrollBarImageColor3 = Config.HighlightColor
				ScrollArea.ScrollBarImageTransparency = 0.500

				ScrollContent.Name = "ScrollContent"
				ScrollContent.Parent = ScrollArea
				ScrollContent.BackgroundTransparency = 1.000
				ScrollContent.Size = UDim2.new(1, 0, 0, 0)

				ScrollL.Name = "ScrollL"
				ScrollL.Parent = ScrollContent
				ScrollL.SortOrder = Enum.SortOrder.LayoutOrder

				-- 滚动文本
				ScrollText.Name = "ScrollText"
				ScrollText.Parent = ScrollContent
				ScrollText.BackgroundTransparency = 1.000
				ScrollText.Size = UDim2.new(1, 0, 0, 0)
				ScrollText.Font = Config.Font
				ScrollText.Text = content
				ScrollText.TextColor3 = Config.TextColor
				ScrollText.TextSize = 12.000
				ScrollText.TextWrapped = true
				ScrollText.TextXAlignment = Enum.TextXAlignment.Left

				-- 文本高亮（示例：高亮数字）
				if highlightColor then
					ScrollText.Text = ScrollText.Text:gsub("(%d+)", function(num)
						return string.format("<font color=\"#%02X%02X%02X\">%s</font>", 
							highlightColor.R*255, highlightColor.G*255, highlightColor.B*255, num)
					end)
				end

				-- 自动调整高度
				ScrollText:GetPropertyChangedSignal("TextBounds"):Connect(function()
					ScrollText.Size = UDim2.new(1, 0, 0, ScrollText.TextBounds.Y)
					ScrollArea.CanvasSize = UDim2.new(0, 0, 0, ScrollText.TextBounds.Y)
				end)

				return ScrollText
			end

			-- 14. 倒计时器（新增）
			function section.Countdown(section, text, totalSec, format)
				local CountModule = Instance.new("Frame")
				local CountBack = Instance.new("Frame")
				local CountBackC = createCorner(CountBack, 6)
				local CountTitle = Instance.new("TextLabel")
				local CountDisplay = Instance.new("TextLabel")
				local CountTimer = nil

				-- 格式配置
				local formatType = format or "MM:SS"
				local totalTime = totalSec
				local remainingSec = totalSec

				CountModule.Name = "CountdownModule"
				CountModule.Parent = Objs
				CountModule.BackgroundTransparency = 1.000
				CountModule.Size = UDim2.new(0, 220, 0, 38)

				CountBack.Name = "CountBack"
				CountBack.Parent = CountModule
				CountBack.BackgroundColor3 = Config.ZyColor
				CountBack.BackgroundTransparency = Config.ZyTransparency
				CountBack.Size = UDim2.new(1, 0, 1, 0)
				createGradient(CountBack)

				CountTitle.Name = "CountTitle"
				CountTitle.Parent = CountBack
				CountTitle.BackgroundTransparency = 1.000
				CountTitle.Position = UDim2.new(0.02, 0, 0, 0)
				CountTitle.Size = UDim2.new(0, 120, 0, 38)
				CountTitle.Font = Config.Font
				CountTitle.Text = text
				CountTitle.TextColor3 = Config.TextColor
				CountTitle.TextSize = 14.000

				CountDisplay.Name = "CountDisplay"
				CountDisplay.Parent = CountBack
				CountDisplay.BackgroundColor3 = Config.MainColor
				CountDisplay.BackgroundTransparency = Config.MainTransparency
				CountDisplay.Position = UDim2.new(0.6, 0, 0.15, 0)
				CountDisplay.Size = UDim2.new(0, 80, 0, 26)
				CountDisplay.Font = Config.Font
				CountDisplay.Text = formatTime(remainingSec, formatType)
				CountDisplay.TextColor3 = Config.HighlightColor
				CountDisplay.TextSize = 16.000
				CountDisplay.TextXAlignment = Enum.TextXAlignment.Center

				-- 倒计时API
				local countdown = {
					-- 开始倒计时
					Start = function(self, endCallback)
						if CountTimer then task.cancel(CountTimer) end
						remainingSec = totalTime
						CountDisplay.Text = formatTime(remainingSec, formatType)
						CountDisplay.TextColor3 = Config.HighlightColor

						CountTimer = task.spawn(function()
							while remainingSec > 0 do
								task.wait(1)
								remainingSec = remainingSec - 1
								CountDisplay.Text = formatTime(remainingSec, formatType)

								-- 最后3秒闪烁
								if remainingSec <= 3 then
									Tween(CountDisplay, {}, { TextTransparency = 0.5 })
									task.wait(0.5)
									Tween(CountDisplay, {}, { TextTransparency = 0 })
								end
							end

							-- 倒计时结束
							CountDisplay.Text = formatTime(0, formatType)
							Tween(CountDisplay, {}, { TextColor3 = Color3.fromRGB(255,87,87) })
							if endCallback then endCallback() end
						end)
					end,
					-- 暂停
					Pause = function(self)
						if CountTimer then task.pause(CountTimer) end
					end,
					-- 恢复
					Resume = function(self)
						if CountTimer then task.resume(CountTimer) end
					end,
					-- 重置
					Reset = function(self)
						self:Start()
					end,
					-- 设置总时长
					SetTotalTime = function(self, sec)
						totalTime = sec
						remainingSec = sec
						CountDisplay.Text = formatTime(remainingSec, formatType)
					end
				}

				-- 悬停效果
				CountBack.MouseEnter:Connect(function()
					Tween(CountBack, {}, { BackgroundTransparency = 0 })
				end)
				CountBack.MouseLeave:Connect(function()
					Tween(CountBack, {}, { BackgroundTransparency = Config.ZyTransparency })
				end)

				return countdown
			end

			return section
		end
		return tab
	end

	return window
end

return library
